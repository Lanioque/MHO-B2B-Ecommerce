services:
  postgres:
    image: postgres:16-alpine
    container_name: ecom-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ecommerce_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecom-network

  redis:
    image: redis:7-alpine
    container_name: ecom-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecom-network

  app:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: ecom-app
    ports:
      - "3000:3000"
      - "5555:5555"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ecommerce_dev
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=development-secret-change-in-production-for-docker
      - TELR_MODE=test
      - ZOHO_REGION=eu
    volumes:
      - ./apps/web:/app/apps/web
      - /app/apps/web/node_modules
      - /app/apps/web/.next
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: sh -c "sleep 5 && pnpm prisma migrate deploy && pnpm dev"
    restart: unless-stopped
    networks:
      - ecom-network

  zoho-sync:
    build:
      context: ./services/zoho-sync
      dockerfile: Dockerfile
    container_name: zoho-sync-service
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ecommerce_dev
      - ZOHO_CLIENT_ID=${ZOHO_CLIENT_ID}
      - ZOHO_CLIENT_SECRET=${ZOHO_CLIENT_SECRET}
      - ZOHO_ORGANIZATION_ID=${ZOHO_ORGANIZATION_ID:-806552835}
      - ZOHO_REGION=${ZOHO_REGION:-eu}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ecom-network

networks:
  ecom-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
